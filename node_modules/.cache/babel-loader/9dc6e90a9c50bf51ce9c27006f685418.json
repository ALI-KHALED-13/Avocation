{"ast":null,"code":"var _jsxFileName = \"D:\\\\ali\\\\programming\\\\React\\\\avocation\\\\client\\\\src\\\\Components\\\\HomeComponents\\\\Categories.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Categories = ({\n  setChosenCategs\n}) => {\n  _s();\n\n  const [categories, setCategrories] = useState([]);\n  useEffect(() => {\n    fetch('/tags').then(resp => resp.json()).then(tagsArr => {\n      const availCateg = tagsArr.filter(tagOb => tagOb.count > 0).sort((ob1, ob2) => ob2.count - ob1.count);\n      setCategrories(availCateg.slice(0, 4));\n    }).catch(console.log);\n  }, []);\n\n  const markSelected = ev => {\n    if (ev.target.nodeName !== \"BUTTON\") return;\n    ev.target.classList.toggle('selected-categ');\n    const chosen = Array.from(ev.target.parentElement.getElementsByClassName('selected-categ')).map(button => {\n      return button.textContent;\n    });\n    setChosenCategs(chosen.length ? chosen : ['']); // to avoid storing empty array, review catcha point in avocata area component\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"aside\", {\n    onClick: markSelected,\n    children: categories.map(categ => /*#__PURE__*/_jsxDEV(\"button\", {\n      children: categ.tag\n    }, categ.tag, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 36\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Categories, \"olg9S2zoKi9YbNiFwxbADjHb55s=\");\n\n_c = Categories;\nexport default Categories;\n\nvar _c;\n\n$RefreshReg$(_c, \"Categories\");","map":{"version":3,"sources":["D:/ali/programming/React/avocation/client/src/Components/HomeComponents/Categories.js"],"names":["useEffect","useState","Categories","setChosenCategs","categories","setCategrories","fetch","then","resp","json","tagsArr","availCateg","filter","tagOb","count","sort","ob1","ob2","slice","catch","console","log","markSelected","ev","target","nodeName","classList","toggle","chosen","Array","from","parentElement","getElementsByClassName","map","button","textContent","length","categ","tag"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;;AAEA,MAAMC,UAAU,GAAE,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAqB;AAAA;;AACnC,QAAM,CAACC,UAAD,EAAaC,cAAb,IAA+BJ,QAAQ,CAAC,EAAD,CAA7C;AAEAD,EAAAA,SAAS,CAAC,MAAI;AACVM,IAAAA,KAAK,CAAC,OAAD,CAAL,CACCC,IADD,CACMC,IAAI,IAAGA,IAAI,CAACC,IAAL,EADb,EAECF,IAFD,CAEMG,OAAO,IAAE;AACX,YAAMC,UAAU,GAAGD,OAAO,CAACE,MAAR,CAAeC,KAAK,IAAGA,KAAK,CAACC,KAAN,GAAc,CAArC,EAAwCC,IAAxC,CAA6C,CAACC,GAAD,EAAMC,GAAN,KAAaA,GAAG,CAACH,KAAJ,GAAYE,GAAG,CAACF,KAA1E,CAAnB;AACAT,MAAAA,cAAc,CAACM,UAAU,CAACO,KAAX,CAAiB,CAAjB,EAAoB,CAApB,CAAD,CAAd;AACH,KALD,EAMCC,KAND,CAMOC,OAAO,CAACC,GANf;AAOH,GARQ,EAQN,EARM,CAAT;;AAUA,QAAMC,YAAY,GAAGC,EAAD,IAAO;AACvB,QAAIA,EAAE,CAACC,MAAH,CAAUC,QAAV,KAAuB,QAA3B,EAAqC;AACrCF,IAAAA,EAAE,CAACC,MAAH,CAAUE,SAAV,CAAoBC,MAApB,CAA2B,gBAA3B;AAEA,UAAMC,MAAM,GAAGC,KAAK,CAACC,IAAN,CAAWP,EAAE,CAACC,MAAH,CAAUO,aAAV,CAAwBC,sBAAxB,CAA+C,gBAA/C,CAAX,EAA6EC,GAA7E,CAAiFC,MAAM,IAAE;AACpG,aAAOA,MAAM,CAACC,WAAd;AACH,KAFc,CAAf;AAGAhC,IAAAA,eAAe,CAACyB,MAAM,CAACQ,MAAP,GAAeR,MAAf,GAAuB,CAAC,EAAD,CAAxB,CAAf,CAPuB,CAOuB;AACjD,GARD;;AASA,sBACI;AAAO,IAAA,OAAO,EAAEN,YAAhB;AAAA,cAEIlB,UAAU,CAAC6B,GAAX,CAAeI,KAAK,iBAAG;AAAA,gBAAyBA,KAAK,CAACC;AAA/B,OAAaD,KAAK,CAACC,GAAnB;AAAA;AAAA;AAAA;AAAA,YAAvB;AAFJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH,CA7BD;;GAAMpC,U;;KAAAA,U;AA+BN,eAAeA,UAAf","sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nconst Categories =({setChosenCategs})=>{\r\n    const [categories, setCategrories] = useState([]);\r\n\r\n    useEffect(()=>{\r\n        fetch('/tags')\r\n        .then(resp=> resp.json())\r\n        .then(tagsArr=>{\r\n            const availCateg = tagsArr.filter(tagOb=> tagOb.count > 0).sort((ob1, ob2)=> ob2.count - ob1.count );\r\n            setCategrories(availCateg.slice(0, 4));\r\n        })\r\n        .catch(console.log);\r\n    }, [])\r\n\r\n    const markSelected =(ev)=> {\r\n        if (ev.target.nodeName !== \"BUTTON\") return;\r\n        ev.target.classList.toggle('selected-categ');\r\n\r\n        const chosen = Array.from(ev.target.parentElement.getElementsByClassName('selected-categ')).map(button=>{\r\n            return button.textContent;\r\n        })\r\n        setChosenCategs(chosen.length? chosen: ['']); // to avoid storing empty array, review catcha point in avocata area component\r\n    }\r\n    return (\r\n        <aside onClick={markSelected}>\r\n            {\r\n            categories.map(categ=> <button key={categ.tag}>{categ.tag}</button>)\r\n            }\r\n        </aside>\r\n    );\r\n}\r\n\r\nexport default Categories;"]},"metadata":{},"sourceType":"module"}