{"ast":null,"code":"var _jsxFileName = \"D:\\\\ali\\\\programming\\\\React\\\\avocation\\\\client\\\\src\\\\Components\\\\HomeComponents\\\\AvocatasArea.js\";\nimport React from \"react\";\nimport Avocata from './Avocata';\nimport AvocataForm from \"../SubComponents/AvocataForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass AvocatasArea extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      avocatas: [],\n      users: []\n    };\n    this.controller = new AbortController();\n    this.updataAvocatas = this.updataAvocatas.bind(this);\n    this.handleObserver = this.handleObserver.bind(this);\n  }\n\n  componentDidMount() {\n    fetch('/users', {\n      signal: this.controller.signal\n    }).then(resp => resp.json()).then(fetchedUsers => {\n      this.setState({\n        users: fetchedUsers\n      });\n      fetch('/all-avocatas', {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          createdBefore: Date.now()\n        }),\n        signal: this.controller.signal\n      }).then(resp => resp.json()).then(avocatas => {\n        var _this$state$avocatas$;\n\n        if (avocatas[0]._id === ((_this$state$avocatas$ = this.state.avocatas[0]) === null || _this$state$avocatas$ === void 0 ? void 0 : _this$state$avocatas$._id)) {\n          // no new stuff\n          return;\n        }\n\n        this.updataAvocatas(avocatas);\n      }).catch(err => {\n        if (err.name === \"AbortError\") return;\n        console.log(err);\n      });\n    }).catch(err => {\n      if (err.name === \"AbortError\") return;\n      console.log(err);\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.users.length === 0) return; // it the first update for users, avocatas are yet fetching\n\n    const observer = new IntersectionObserver(this.handleObserver, {\n      threeshold: 0.1\n    });\n    let feedSection = document.getElementById('feed');\n    let lastAvoca = feedSection.children[feedSection.children.length - 2]; //-1 is the loading..\n\n    observer.observe(lastAvoca); /////////////////////update users status ////////\n\n    fetch('/users', {\n      signal: this.controller.signal\n    }).then(resp => resp.json()).then(fetchedUsers => {\n      console.log('fetched users from avocatas area');\n      let condition = fetchedUsers.length > this.state.users.length || fetchedUsers.some((user, ind) => user.logged !== this.state.users[ind].logged);\n      if (condition) this.setState({\n        users: fetchedUsers\n      });\n    }).catch(console.log);\n  }\n\n  componentWillUnmount() {\n    this.controller.abort();\n  }\n\n  updataAvocatas(arr) {\n    this.setState({\n      avocatas: arr\n    });\n    document.getElementById('feed').lastElementChild.style.visibility = \"hidden\";\n  }\n\n  handleObserver(entries, observer) {\n    let feedSection = document.getElementById('feed');\n    if (entries[0].target.querySelector(\"#mother\") !== null) return; // it's my mother avoca (not logged IN)... wait till the last avoca gets inserted\n\n    if (entries[0].target.nodeName === \"FORM\") return; // it's the AvocataForm (logged IN)... wait till the last avoca gets inserted\n\n    if (entries[0].isIntersecting) {\n      feedSection.lastElementChild.style.visibility = \"visible\"; //loading text\n\n      fetch('/all-avocatas', {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          createdBefore: this.state.avocatas[this.state.avocatas.length - 1].createdAt\n        }),\n        signal: this.controller.signal\n      }).then(resp => resp.json()).then(avocatas => {\n        if (avocatas.length > 0 && // if something was returned\n        avocatas[0]._id !== this.state.avocatas[this.state.avocatas.length - 1]._id) {\n          //avoid repetition\n          this.updataAvocatas(this.state.avocatas.concat(avocatas));\n        }\n\n        feedSection.lastElementChild.style.visibility = \"hidden\";\n        observer.unobserve(entries[0].target);\n      }).catch(err => {\n        if (err.name === \"AbortError\") return;\n        console.log(err);\n      });\n    }\n  }\n\n  render() {\n    return !this.state.users.length ? /*#__PURE__*/_jsxDEV(\"section\", {\n      children: \"loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 42\n    }, this) : /*#__PURE__*/_jsxDEV(\"section\", {\n      id: \"feed\",\n      children: [/*#__PURE__*/_jsxDEV(Avocata, {\n        user: false,\n        users: this.state.users,\n        data: {\n          text: \"for my beloved Mother, who used to love avocado juice :)\",\n          creator: \"Azza\",\n          tags: \"THANKS\",\n          filename: \"أمي.jpg\",\n          contentType: \"image/jpeg\",\n          createdAt: \"Forever\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this), this.props.user && /*#__PURE__*/_jsxDEV(AvocataForm, {\n        user: this.props.user,\n        avocatas: this.state.avocatas,\n        updataAvocatas: this.updataAvocatas\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 37\n      }, this), this.state.avocatas.length > 0 && this.state.avocatas.map(avocata => {\n        let chosenTags = this.props.chosenCategs;\n\n        if (chosenTags.includes('mine')) {\n          if (avocata.creator !== this.props.user.userName) return null;\n          chosenTags = this.props.chosenCategs.filter(tag => tag !== 'mine');\n        }\n\n        if (chosenTags.some(categ => avocata.tags.indexOf(categ) === -1)) {\n          //catcha point: [''].some() runs, while [].some() returns false, always\n          return null; //'blahblah'.indexOf('') === -1 returns false cause '' exists XD\n        }\n\n        return /*#__PURE__*/_jsxDEV(Avocata, {\n          data: avocata,\n          user: this.props.user,\n          users: this.state.users,\n          avocatas: this.state.avocatas,\n          updataAvocatas: this.updataAvocatas\n        }, avocata.createdAt, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 64\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"article\", {\n        style: {\n          margin: \"20px\"\n        },\n        children: \"Loading fresh avocatas...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 18\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default AvocatasArea; //react.memo the who;e area???","map":{"version":3,"sources":["D:/ali/programming/React/avocation/client/src/Components/HomeComponents/AvocatasArea.js"],"names":["React","Avocata","AvocataForm","AvocatasArea","Component","constructor","props","state","avocatas","users","controller","AbortController","updataAvocatas","bind","handleObserver","componentDidMount","fetch","signal","then","resp","json","fetchedUsers","setState","method","headers","body","JSON","stringify","createdBefore","Date","now","_id","catch","err","name","console","log","componentDidUpdate","prevProps","prevState","length","observer","IntersectionObserver","threeshold","feedSection","document","getElementById","lastAvoca","children","observe","condition","some","user","ind","logged","componentWillUnmount","abort","arr","lastElementChild","style","visibility","entries","target","querySelector","nodeName","isIntersecting","createdAt","concat","unobserve","render","text","creator","tags","filename","contentType","map","avocata","chosenTags","chosenCategs","includes","userName","filter","tag","categ","indexOf","margin"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Avocata from './Avocata';\r\nimport AvocataForm from \"../SubComponents/AvocataForm\";\r\n\r\n\r\nclass AvocatasArea extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            avocatas: [],\r\n            users: [],\r\n        };\r\n        this.controller = new AbortController();\r\n        this.updataAvocatas = this.updataAvocatas.bind(this);\r\n        this.handleObserver = this.handleObserver.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('/users', {signal: this.controller.signal})\r\n        .then(resp=> resp.json())\r\n        .then(fetchedUsers=> {\r\n            this.setState({users: fetchedUsers});\r\n\r\n            fetch('/all-avocatas', {\r\n                method: \"PUT\",\r\n                headers: {\"Content-Type\": \"application/json\"},\r\n                body: JSON.stringify({createdBefore: Date.now()}),\r\n                signal: this.controller.signal,\r\n            })\r\n            .then(resp=> resp.json())\r\n            .then(avocatas=> {\r\n                if (avocatas[0]._id === this.state.avocatas[0]?._id){// no new stuff\r\n                    return;\r\n                }\r\n                this.updataAvocatas(avocatas);   \r\n            })\r\n            .catch(err=>{\r\n                if (err.name === \"AbortError\") return;\r\n                console.log(err)\r\n            });\r\n\r\n        })\r\n        .catch(err=>{\r\n            if (err.name === \"AbortError\") return;\r\n            console.log(err)\r\n        });\r\n\r\n        \r\n    }\r\n    \r\n    \r\n    componentDidUpdate(prevProps, prevState){\r\n        if (prevState.users.length === 0) return ; // it the first update for users, avocatas are yet fetching\r\n\r\n        const observer = new IntersectionObserver(this.handleObserver, {threeshold: 0.1});\r\n\r\n        let feedSection = document.getElementById('feed');\r\n        let lastAvoca = feedSection.children[feedSection.children.length - 2]; //-1 is the loading..\r\n        observer.observe(lastAvoca);\r\n\r\n        /////////////////////update users status ////////\r\n        fetch('/users', {signal: this.controller.signal})\r\n        .then(resp=> resp.json())\r\n        .then(fetchedUsers=>{\r\n            console.log('fetched users from avocatas area')\r\n            let condition = fetchedUsers.length > this.state.users.length || \r\n                            fetchedUsers.some((user, ind)=> user.logged !== this.state.users[ind].logged);\r\n\r\n            if (condition) this.setState({users: fetchedUsers})\r\n        })\r\n        .catch(console.log)\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        this.controller.abort();\r\n    }\r\n\r\n    updataAvocatas(arr){ \r\n        this.setState({avocatas: arr});\r\n        document.getElementById('feed').lastElementChild.style.visibility = \"hidden\";\r\n    }\r\n\r\n    handleObserver(entries, observer){\r\n        let feedSection = document.getElementById('feed');\r\n        if (entries[0].target.querySelector(\"#mother\") !== null) return; // it's my mother avoca (not logged IN)... wait till the last avoca gets inserted\r\n\r\n        if (entries[0].target.nodeName === \"FORM\") return; // it's the AvocataForm (logged IN)... wait till the last avoca gets inserted\r\n        \r\n        if (entries[0].isIntersecting){\r\n            feedSection.lastElementChild.style.visibility = \"visible\"; //loading text\r\n\r\n            fetch('/all-avocatas', {\r\n                method: \"PUT\",\r\n                headers: {\"Content-Type\": \"application/json\"},\r\n                body: JSON.stringify({\r\n                    createdBefore: this.state.avocatas[this.state.avocatas.length - 1].createdAt\r\n                }),\r\n                signal: this.controller.signal,\r\n            })\r\n            .then(resp=> resp.json())\r\n            .then(avocatas=> {\r\n                if (avocatas.length > 0 && // if something was returned\r\n                    avocatas[0]._id !== this.state.avocatas[this.state.avocatas.length - 1]._id){ //avoid repetition\r\n\r\n                    this.updataAvocatas(this.state.avocatas.concat(avocatas));\r\n                }\r\n                feedSection.lastElementChild.style.visibility = \"hidden\";\r\n                observer.unobserve(entries[0].target); \r\n            })\r\n            .catch(err=>{\r\n                if (err.name === \"AbortError\") return;\r\n                console.log(err)\r\n            });\r\n        }\r\n    }\r\n\r\n    render(){\r\n        \r\n        return !this.state.users.length? <section>loading...</section>: \r\n          (\r\n            <section id=\"feed\">\r\n                \r\n                <Avocata user={false} users={this.state.users}\r\n                    data={{\r\n                        text: \"for my beloved Mother, who used to love avocado juice :)\",\r\n                        creator: \"Azza\",\r\n                        tags: \"THANKS\",\r\n                        filename: \"أمي.jpg\",\r\n                        contentType: \"image/jpeg\",\r\n                        createdAt: \"Forever\",\r\n\r\n                    }} \r\n                />\r\n\r\n                {this.props.user && <AvocataForm \r\n                                    user={this.props.user} avocatas={this.state.avocatas} \r\n                                    updataAvocatas={this.updataAvocatas}\r\n                                />\r\n                }\r\n\r\n                {this.state.avocatas.length > 0 && this.state.avocatas\r\n                                                    .map(avocata=>{\r\n                                                        let chosenTags = this.props.chosenCategs;\r\n                                                        if (chosenTags.includes('mine')){\r\n                                                            if (avocata.creator !== this.props.user.userName) return null\r\n                                                            chosenTags = this.props.chosenCategs.filter(tag=> tag !== 'mine');\r\n                                                        }\r\n                                                       \r\n                                                        if (chosenTags.some(categ=> avocata.tags.indexOf(categ) === -1)){ //catcha point: [''].some() runs, while [].some() returns false, always\r\n                                                            return null; //'blahblah'.indexOf('') === -1 returns false cause '' exists XD\r\n                                                        }\r\n                                                        return <Avocata key={avocata.createdAt} data={avocata} \r\n                                                                user={this.props.user} users={this.state.users}\r\n                                                                avocatas={this.state.avocatas} updataAvocatas={this.updataAvocatas}\r\n                                                                />\r\n                                                    })\r\n                }\r\n                 <article style={{margin: \"20px\"}}>Loading fresh avocatas...</article> \r\n\r\n            </section>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AvocatasArea; //react.memo the who;e area???\r\n\r\n"]},"metadata":{},"sourceType":"module"}