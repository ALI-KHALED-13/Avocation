{"ast":null,"code":"var _jsxFileName = \"D:\\\\ali\\\\programming\\\\React\\\\avocation\\\\client\\\\src\\\\Components\\\\SubComponents\\\\TagInput.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport removeSign from '../../media/xsign.png';\nimport './TagInput.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TagInput = ({\n  savedTags,\n  saveTag,\n  addedTags,\n  setAddedTags\n}) => {\n  _s();\n\n  const [isFocused, setIsFocused] = useState(false);\n  const [tagInp, setTagInp] = useState('');\n\n  const handleChange = ev => {\n    if (ev.target.value === ' ') return; // to avoid storing /s\n\n    if (!isFocused) setIsFocused(true);\n    setTagInp(ev.target.value.toUpperCase());\n  };\n\n  const addToBag = ev => {\n    if (!tagInp) return;\n    const isAndroidSpace = tagInp.charCodeAt(tagInp.length - 1) === 32; //for chrome on android\n\n    if (!ev.key || ev.key === 'Enter' || ev.key === ' ' || isAndroidSpace) {\n      const tagTxt = ev.target.className !== 'suggestion' ? tagInp.trim() : ev.target.textContent; //async setTagInp\n\n      if (addedTags.indexOf(tagTxt) >= 0) return setTagInp(''); //if already added reset\n\n      saveTag(tagTxt);\n      setAddedTags([...addedTags, tagTxt]);\n      return setTagInp('');\n    }\n  };\n\n  const removeFromBag = ev => {\n    setAddedTags(addedTags.filter(tag => tag !== ev.target.previousElementSibling.textContent));\n  };\n\n  const insertSuggestions = () => {\n    if (!tagInp) return;\n    const hints = savedTags.filter(tag => tag.startsWith(tagInp));\n    if (!hints.length) return /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"add\",\n      onClick: addToBag,\n      children: \"+\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 37\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"suggestions\",\n      children: [\" \", hints.map((tag, ind) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"suggestion\",\n          onClick: addToBag,\n          children: tag\n        }, Date.now() + ind, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 18\n        }, this);\n      }), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 16\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"tagsBag\",\n      children: [addedTags.map((tag, ind) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tag\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: tag\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            alt: \"del\",\n            src: removeSign,\n            className: \"del\",\n            onClick: removeFromBag\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 33\n          }, this)]\n        }, Date.now() + ind, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 29\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"Add Tags\",\n        onBlur: () => setTimeout(() => setIsFocused(false), 300),\n        value: tagInp,\n        onFocus: () => setIsFocused(true),\n        onChange: handleChange,\n        onKeyUp: addToBag\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), isFocused && insertSuggestions()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TagInput, \"G8fYttzqt+SsrPKgX2DPpcm/JB4=\");\n\n_c = TagInput;\nexport default TagInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"TagInput\");","map":{"version":3,"sources":["D:/ali/programming/React/avocation/client/src/Components/SubComponents/TagInput.js"],"names":["useState","removeSign","TagInput","savedTags","saveTag","addedTags","setAddedTags","isFocused","setIsFocused","tagInp","setTagInp","handleChange","ev","target","value","toUpperCase","addToBag","isAndroidSpace","charCodeAt","length","key","tagTxt","className","trim","textContent","indexOf","removeFromBag","filter","tag","previousElementSibling","insertSuggestions","hints","startsWith","map","ind","Date","now","setTimeout"],"mappings":"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","sourcesContent":["import { useState } from \"react\"\r\nimport removeSign from '../../media/xsign.png';\r\nimport './TagInput.css';\r\n\r\nconst TagInput =({savedTags, saveTag, addedTags, setAddedTags})=>{\r\n    const [isFocused, setIsFocused] = useState(false);\r\n    const [tagInp, setTagInp] = useState('');\r\n    \r\n\r\n    const handleChange =(ev)=>{\r\n        if (ev.target.value === ' ') return; // to avoid storing /s\r\n        if (!isFocused) setIsFocused(true);\r\n        \r\n        setTagInp(ev.target.value.toUpperCase());\r\n    }\r\n    \r\n    const addToBag =(ev)=>{\r\n        if (!tagInp) return;\r\n        const isAndroidSpace = tagInp.charCodeAt(tagInp.length - 1) === 32; //for chrome on android\r\n\r\n        if ( !ev.key || ev.key === 'Enter' || ev.key === ' ' || isAndroidSpace){\r\n            const tagTxt = ev.target.className !== 'suggestion'? tagInp.trim() : ev.target.textContent; //async setTagInp\r\n            if (addedTags.indexOf(tagTxt) >= 0) return setTagInp(''); //if already added reset\r\n\r\n            saveTag(tagTxt);\r\n\r\n            setAddedTags([...addedTags, tagTxt]);\r\n\r\n            return setTagInp('');\r\n        }\r\n        \r\n    }\r\n\r\n    const removeFromBag =(ev)=> {\r\n        setAddedTags(addedTags.filter(tag=> tag !== ev.target.previousElementSibling.textContent));\r\n    }\r\n\r\n    const insertSuggestions =()=> { \r\n        if (!tagInp) return;\r\n\r\n        const hints = savedTags.filter(tag=> tag.startsWith(tagInp));\r\n        \r\n        if ( !hints.length ) return <button className=\"add\" onClick={addToBag}>+</button>;\r\n        \r\n        return <div id=\"suggestions\"> {hints.map((tag, ind)=> {\r\n          return <div className=\"suggestion\" key={Date.now() + ind} onClick={addToBag}>{tag}</div>;\r\n        }) } </div>\r\n    }\r\n\r\n    return (\r\n        <section>\r\n\r\n            <div id=\"tagsBag\">\r\n                {\r\n                    addedTags.map((tag, ind)=> {\r\n                        return (\r\n                            <div className=\"tag\" key={Date.now() + ind}>\r\n                                <p>{tag}</p> \r\n                                <img alt=\"del\" src={removeSign} className=\"del\" onClick={removeFromBag} />\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n\r\n                <input \r\n                    placeholder=\"Add Tags\" \r\n                    onBlur={()=> setTimeout(()=>setIsFocused(false), 300)}\r\n                    value={tagInp}\r\n                    onFocus={()=> setIsFocused(true)}\r\n                    onChange={handleChange}\r\n                    onKeyUp={addToBag}\r\n                />\r\n            </div>\r\n\r\n                {\r\n                    isFocused && insertSuggestions()\r\n                }\r\n            \r\n        </section>\r\n    );\r\n}\r\nexport default TagInput;"]},"metadata":{},"sourceType":"module"}